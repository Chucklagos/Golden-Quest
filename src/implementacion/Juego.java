package implementacion;
import java.util.ArrayList;
import java.util.HashMap;

import clases.Disparo;
import clases.Enemigo;
import clases.Item;
import clases.Jugador;
import clases.ReproduceAudio;
import clases.Tile;
import javafx.animation.AnimationTimer;
import javafx.application.Application;
import javafx.event.EventHandler;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.image.Image;
import javafx.scene.input.KeyEvent;
import javafx.scene.text.Font;
import javafx.stage.Stage;

public class Juego extends Application{
	private Scene escena;
	private Group root;
	private Canvas lienzo;
	private GraphicsContext graficos;

	public static boolean derecha;
	public static boolean izquierda;
	public static boolean arriba;
	public static boolean abajo;
	public static boolean accion;

	public static HashMap<String,Image> imagenes;
	private Jugador jugador;
	private Tile d1, d2, d3, d4;
	private ArrayList<Tile> tiles;
	private ArrayList<Tile> arboles;
	private ArrayList<Tile> adornos;
	//private ArrayList<Enemigo> enemigo;
	private Enemigo enemigo0;
	private Enemigo enemigo1;
	private Enemigo enemigo2;
	private Enemigo enemigo3;
	private Enemigo enemigo4;
	private Enemigo enemigo5;
	private Item boost1;
	private Disparo disparo;
	private ReproduceAudio audio = new ReproduceAudio();

	/*
	 * 1. Hielo
	 * 2. Piedra
	 * 3. Piedra con grama
	 * 4. Grama ligera
	 * 5. Grama cortada
	 * 6. Grama alta
	 * 7. Agua
	 *
	 */
	private int[][] mapaNivel = {
			{5,6,5,5,5,4,6,5,6,4,4,4,5,6,6,6,5,5,6,5,6,5,4,6,4,5,6,5,3,3,5,4,4,5,6,6,5,4,6,5,3,2,5,4,4,4,4,5,2,2,2,2,2,2,2,3,3,2,2,2,3,2,2,3,2,2,2,2,3,2,2,2,3,2,2,3,3,4,5,6,5,4,4,5,4,5,4,6,5,4,4,5,5,6,4,5,6,6,5,4,5,4,4,5,6,4,5,4,5,6,4,5,4,5,6,6,5,1,5,1,5,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,7,7,7,7,7,7,7,7,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
			{4,5,5,6,6,4,4,5,5,4,6,5,6,4,6,5,5,6,4,6,5,4,4,6,5,5,6,6,2,3,6,4,5,6,5,6,5,4,5,6,3,3,5,4,5,6,5,4,2,3,3,3,2,2,3,2,2,2,3,3,3,2,2,2,3,3,2,2,2,3,2,3,3,2,3,3,2,4,5,6,5,4,4,6,4,5,4,6,5,4,4,5,5,6,4,6,6,6,5,4,5,4,4,5,6,4,5,4,5,6,4,5,4,5,1,6,5,6,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
			{5,6,6,5,6,5,4,5,5,5,6,5,4,5,6,4,5,4,5,4,4,5,6,5,6,4,6,4,2,2,6,5,4,5,6,5,6,5,4,5,2,2,4,5,6,5,5,6,2,3,3,2,3,2,3,2,2,2,3,3,2,2,2,3,3,3,2,2,2,3,3,2,2,3,2,2,2,4,5,6,5,4,4,5,5,5,4,4,5,4,6,5,5,6,4,5,6,6,5,4,5,4,4,5,6,4,5,4,5,6,4,1,4,5,6,6,5,1,5,1,4,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
			{6,6,6,5,6,5,4,5,6,5,5,4,5,4,4,4,5,6,5,6,5,6,6,6,5,5,5,4,2,2,5,6,4,5,6,5,6,5,4,5,2,2,5,5,6,5,4,5,2,3,2,4,5,6,6,6,4,5,6,5,5,4,5,6,4,5,6,4,5,5,4,6,5,5,2,2,2,4,5,6,5,4,4,5,4,4,4,6,5,4,4,5,5,6,4,4,6,6,5,4,5,4,4,5,6,1,5,1,5,1,4,5,4,5,6,6,5,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
			{5,5,5,5,5,4,6,5,4,4,4,4,5,6,4,6,4,5,6,6,6,5,4,6,4,5,6,5,3,2,5,4,4,5,6,6,5,4,6,5,2,2,2,3,2,3,2,3,2,2,3,5,5,6,4,5,6,5,5,5,4,4,5,6,4,6,5,5,6,5,5,6,4,5,2,2,3,4,5,6,5,4,4,5,4,5,4,6,5,4,4,5,5,4,4,5,6,6,5,4,5,4,4,5,6,4,5,4,5,6,4,5,4,1,6,6,1,1,5,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
			{3,3,2,3,3,2,3,2,4,4,6,5,6,4,6,5,5,6,4,6,5,4,4,4,5,5,6,6,2,3,6,4,5,6,5,5,5,4,5,6,3,3,2,2,5,6,5,4,2,3,2,4,4,5,5,4,5,5,6,5,5,4,4,5,6,5,5,5,5,6,5,4,5,5,2,2,2,4,5,6,5,4,4,5,6,5,4,6,5,4,6,5,5,6,4,5,6,6,5,4,5,4,4,5,6,4,5,4,5,6,4,5,4,5,6,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
			{2,2,2,2,2,2,3,2,6,5,4,5,4,5,6,4,5,4,5,4,4,5,6,5,5,4,6,4,2,3,6,5,4,5,6,5,6,5,4,5,3,3,2,2,6,5,5,6,3,2,2,4,5,6,5,4,4,4,5,4,6,4,5,4,5,4,5,4,4,4,5,4,5,4,2,3,2,4,5,6,5,4,4,6,4,4,4,6,5,4,4,5,5,4,4,5,6,6,5,4,5,4,4,5,6,4,5,4,5,6,4,5,4,1,1,6,5,6,5,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
			{2,2,2,3,2,2,3,2,2,2,2,3,2,2,3,3,2,2,2,2,3,3,2,2,3,2,2,2,2,3,5,5,4,5,4,5,6,5,4,5,6,5,3,2,6,5,4,5,2,2,2,5,4,6,4,5,6,5,4,5,5,5,4,5,6,4,6,5,5,6,5,6,5,6,2,3,3,4,5,6,5,4,4,5,4,5,4,6,5,4,4,5,5,6,4,5,6,6,5,4,5,4,4,5,6,1,5,4,5,6,4,5,4,1,6,1,1,1,5,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
			{5,5,5,5,2,3,2,2,3,3,2,3,2,2,2,2,3,2,2,3,3,2,2,2,3,2,2,3,2,3,5,4,4,5,6,6,5,4,6,5,4,6,2,2,4,4,4,5,3,2,3,4,4,6,4,5,5,4,6,5,4,5,5,5,4,4,5,4,5,4,4,5,5,5,2,2,2,4,5,6,5,4,4,5,4,5,4,6,5,4,4,4,5,6,4,5,6,6,5,4,5,4,4,5,6,4,5,4,5,1,4,5,4,5,6,1,5,6,5,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
			{4,5,5,6,3,2,2,2,6,4,6,5,6,4,6,5,5,6,4,6,5,4,2,3,5,5,6,6,5,5,6,4,5,6,5,6,5,4,5,6,5,6,2,2,5,6,5,4,2,3,2,4,5,5,4,4,5,4,5,4,5,4,5,6,4,5,6,5,5,6,4,5,5,5,2,2,2,4,5,6,5,4,4,5,4,5,4,6,4,4,6,5,5,6,4,5,6,6,5,4,5,4,4,5,6,4,1,4,5,6,4,5,4,5,6,6,5,1,5,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
			{5,6,6,5,2,2,3,2,5,5,6,5,4,5,6,4,5,4,5,4,4,5,2,3,6,4,6,4,5,4,6,5,4,5,6,5,6,5,4,5,6,5,2,2,6,5,5,6,2,2,3,4,4,4,5,5,4,6,4,4,6,5,5,4,4,5,5,4,5,4,4,5,4,5,3,2,2,4,5,6,5,4,4,5,4,4,4,6,5,4,4,4,5,6,4,5,6,6,5,4,5,4,4,5,6,4,5,1,5,1,4,5,1,5,1,6,5,6,5,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
			{6,6,6,5,2,2,3,2,6,5,5,4,5,4,4,4,5,6,5,6,5,6,3,2,5,5,5,4,4,5,5,6,4,5,6,5,6,5,4,5,6,5,2,2,6,5,4,5,3,3,3,4,4,5,4,4,5,5,6,5,5,6,5,6,5,6,5,5,5,6,5,6,5,5,2,2,2,4,5,6,5,4,4,5,4,5,4,6,5,4,4,5,5,6,4,5,6,6,5,4,5,4,4,5,6,1,5,4,5,6,4,5,4,5,6,6,5,1,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
			{5,5,5,5,2,2,2,2,5,4,4,4,5,6,4,6,4,5,6,6,6,5,2,2,4,5,6,5,4,6,5,4,4,5,6,6,5,4,6,5,4,6,2,2,4,4,4,5,3,3,2,5,4,4,5,5,6,5,5,6,4,5,5,6,4,4,4,5,5,5,5,5,4,4,2,2,2,4,5,6,5,4,4,5,4,5,4,6,5,4,4,5,5,6,4,5,6,6,5,4,5,4,4,5,6,4,5,4,5,1,4,5,4,1,6,1,5,6,5,4,4,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
			{6,4,4,4,5,4,2,2,6,4,6,5,6,4,6,5,5,6,4,6,5,4,3,2,5,5,6,6,5,5,6,4,5,6,5,5,5,4,5,6,5,6,3,2,5,6,5,4,2,3,2,4,5,4,4,6,6,6,5,5,5,6,5,5,4,4,4,5,5,5,5,5,5,4,2,2,3,4,5,6,5,4,4,5,4,5,4,6,5,4,4,5,5,6,4,5,6,6,5,4,5,4,4,5,6,4,5,4,5,6,4,5,4,5,6,6,5,1,5,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
			{6,6,5,4,5,4,2,2,4,5,4,5,4,5,6,4,5,4,5,4,4,5,2,2,5,4,6,4,5,4,6,5,4,5,6,5,6,5,4,5,6,5,3,2,6,5,5,6,2,3,2,5,4,5,5,5,5,6,4,4,4,5,5,4,4,5,4,5,4,4,5,4,5,4,2,3,2,4,5,6,5,4,4,5,4,5,4,6,5,4,4,5,5,6,4,5,6,6,5,4,5,4,4,5,6,4,5,4,5,6,4,5,4,5,1,6,1,6,5,4,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
			{5,5,5,6,5,4,2,2,5,5,5,4,5,4,4,4,5,6,5,6,5,6,2,3,2,3,2,2,3,2,3,2,2,2,3,2,2,2,2,2,3,2,3,2,3,2,3,2,2,3,2,6,6,6,4,4,4,5,6,4,5,5,5,4,4,5,4,5,5,5,6,5,5,4,2,2,4,5,6,5,4,4,5,4,5,4,6,5,4,4,5,5,6,4,5,6,6,5,4,5,4,4,5,6,4,5,4,5,6,4,5,4,5,6,6,5,6,5,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
			{4,4,6,6,4,6,3,2,4,5,6,5,4,5,6,4,5,4,5,4,4,5,3,2,2,3,2,2,2,2,2,3,3,2,2,3,2,2,2,2,2,2,2,3,3,2,2,2,3,3,2,4,6,4,4,4,4,6,6,5,6,5,4,5,5,5,4,5,4,5,5,4,4,5,2,2,2,2,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,2,2,2,2,1,2,2,2,2,2,2,2,2,1,1,3,2,2,2,3,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
			{4,5,5,4,5,4,3,3,6,5,5,4,5,4,4,4,5,6,5,6,5,6,2,2,5,5,5,4,4,5,5,6,4,5,6,5,6,5,4,5,6,5,5,5,6,5,4,5,2,3,3,5,5,6,5,5,5,5,5,5,4,4,5,5,4,4,5,5,4,5,4,4,4,5,3,2,2,3,2,2,2,3,2,2,2,2,2,3,2,2,2,2,2,3,2,2,3,2,2,2,3,2,2,2,2,2,3,1,2,2,1,2,2,1,3,2,2,3,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
			{4,5,6,5,4,5,2,2,4,4,4,4,5,6,6,6,5,5,6,5,6,5,3,3,4,5,6,5,4,6,5,4,4,5,6,6,5,4,6,5,4,6,5,4,4,4,4,5,3,2,3,6,4,5,5,5,4,5,5,4,5,5,5,4,4,5,5,4,5,6,6,5,6,5,2,2,2,2,2,2,3,3,3,2,2,2,3,2,3,2,2,3,2,2,2,2,2,2,2,3,1,3,2,2,2,3,2,3,2,2,3,2,3,3,2,1,3,2,2,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,7,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
	};

	/*
	 * 8. Pino
	 * 9. Arbol sin hojas
	 * 10. Arbol con hojas
	 *
	 */

	private int[][] mapaArboles ={
			{8,8,8,0,8,0,8,8,8,8,8,0,8,8,8,0,8,8,8,8,0,0,8,0,8,8,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
			{8,8,8,8,8,8,8,8,0,8,8,8,8,8,0,8,8,8,0,8,8,0,8,8,8,8,8,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,},
			{8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,9,0,0,0,0,},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
			{10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
			{10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,},
			{10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,},
			{0,0,8,0,0,0,0,0,8,8,8,8,0,8,0,8,8,8,8,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
			{0,8,0,0,0,0,0,0,8,0,0,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,},
			{8,8,10,0,0,0,0,0,0,8,0,8,0,8,0,8,8,0,8,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,},
			{0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,8,0,0,0,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
	};

	/*
	 * 11. Arbusto
	 * 12. Rama caida 1
	 * 13. Rama caida 2
	 *
	 */

	private int[][] mapaAdornos = {
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,13,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
	};

	public static void main(String[] args) {
		launch(args);
	}

	//HashMap
	@Override
	public void start(Stage ventana){
		cargarImagenes();
		crearObjetosJuego();
		ventana.setTitle("Golden Quest");
		ventana.setResizable(false);
		root = new Group();
		escena = new Scene(root,500,600);
		registrarEventos();
		lienzo = new Canvas(500,600);
		graficos = lienzo.getGraphicsContext2D();
		ventana.setScene(escena);
		root.getChildren().add(lienzo);
		cicloPrincipal();
		ventana.show();
	}

	public void cargarImagenes() {
		imagenes = new HashMap<String,Image>();
		imagenes.put("GK", new Image("goldknight.png"));
		imagenes.put("tilemap", new Image("tilemap.png"));
		imagenes.put("arboles", new Image("arboles.png"));
		imagenes.put("d1", new Image("d1.png"));
		imagenes.put("d2", new Image("d2.png"));
		imagenes.put("d3", new Image("d3.png"));
		imagenes.put("d4", new Image("d4.png"));
		imagenes.put("fantasma", new Image("ghost.png"));
		imagenes.put("boostVelocidad", new Image("boost1.png"));
		imagenes.put("hacha", new Image("axe.png"));
	}

	public void crearObjetosJuego() {
		jugador = new Jugador(200,200,10, "GK", 0, 0, 64, 64);
		d1 = new Tile(0, 0, 64, 64, 1000, 200, "d1");
		d2 = new Tile(0, 0, 64, 64, 2000, 450, "d2");
		d3 = new Tile(0, 0, 64, 64, 3000, 500, "d3");
		d4 = new Tile(0, 0, 64, 64, 4000, 150, "d4");
		/*enemigo.add(new Enemigo(900, 200, 5, "fantasma", 0, 0, 64, 64));
		enemigo.add(new Enemigo(1700, 200, 5, "fantasma", 0, 0, 64, 64));
		enemigo.add(new Enemigo(2800, 200, 5, "fantasma", 0, 0, 64, 64));
		enemigo.add(new Enemigo(4500, 200, 5, "fantasma", 0, 0, 64, 64));
		enemigo.add(new Enemigo(5100, 200, 5, "fantasma", 0, 0, 64, 64));
		enemigo.add(new Enemigo(5700, 200, 5, "fantasma", 0, 0, 64, 64));*/
		enemigo0 = new Enemigo(900, 200, 5, "fantasma", 0, 0, 64, 64);
		enemigo1 = new Enemigo(1700, 200, 5, "fantasma", 0, 0, 64, 64);
		enemigo2 = new Enemigo(2800, 200, 5, "fantasma", 0, 0, 64, 64);
		enemigo3 = new Enemigo(4500, 200, 5, "fantasma", 0, 0, 64, 64);
		enemigo4 = new Enemigo(5100, 200, 5, "fantasma", 0, 0, 64, 64);
		enemigo5 = new Enemigo(5700, 200, 5, "fantasma", 0, 0, 64, 64);
		boost1 = new Item(2000, 25, 5, "boostVelocidad");
		disparo = new Disparo(jugador.getX(), jugador.getY() ,5 ,"hacha");


		tiles = new ArrayList<Tile>();
		for (int i=0; i<mapaNivel.length; i++) {
			for (int j=0; j<mapaNivel[i].length; j++) {
				if (mapaNivel[i][j] != 0) {
					tiles.add(new Tile(j*32,i*32,"tilemap",mapaNivel[i][j]));
				}
			}
		}

		arboles = new ArrayList<Tile>();
		for (int i=0; i<mapaArboles.length; i++){
			for (int j=0; j<mapaArboles[i].length; j++){
				if (mapaArboles[i][j] != 0){
					arboles.add(new Tile(j*32,i*32,"arboles",mapaArboles[i][j]));
				}
			}
		}

		adornos = new ArrayList<Tile>();
		for (int i=0; i<mapaAdornos.length; i++){
			for (int j=0; j<mapaAdornos[i].length; j++){
				if (mapaAdornos[i][j] != 0){
					adornos.add(new Tile(j*32,i*32,"arboles",mapaAdornos[i][j]));
				}
			}
		}

	}

	public void cicloPrincipal() {
		AnimationTimer animationTimer = new AnimationTimer() {
			@Override
			public void handle(long tiempoActualNanoSegundos) {
				pintar();
				actualizar();
				//audio.reproducir();
			}
		};
		animationTimer.start();
	}

	public void pintar() {
		graficos.fillRect(0, 0, 500, 600);

		for (int i=0; i<tiles.size(); i++)
			tiles.get(i).pintar(graficos);

		for (int i=0; i<adornos.size(); i++)
			adornos.get(i).pintar(graficos);

		d1.pintar(graficos);
		d2.pintar(graficos);
		d3.pintar(graficos);
		d4.pintar(graficos);
		boost1.pintar(graficos);
		jugador.pintar(graficos);

		/*for (int i=0; i<enemigo.size(); i++)
			enemigo.get(i).pintar(graficos);*/

		enemigo0.pintar(graficos);
		enemigo1.pintar(graficos);
		enemigo2.pintar(graficos);
		enemigo3.pintar(graficos);
		enemigo4.pintar(graficos);
		enemigo5.pintar(graficos);

		if (accion){
			disparo.setX(jugador.getX()+38);
			disparo.setY(jugador.getY()+8);
			disparo.pintar(graficos);
		}
		
		if (!accion){
			disparo.setX(0);
			disparo.setY(0);
		}

		for (int i=0; i<arboles.size(); i++)
			arboles.get(i).pintar(graficos);

		graficos.setFont(new Font(30));
		graficos.fillText(String.valueOf(jugador.getPuntuacion()), 10d, 30d);

	}

	public void actualizar() {
		jugador.mover();
		boost1.mover();

		/*for (int i=0; i<enemigo.size(); i++)
			enemigo.get(i).mover();*/

		enemigo0.mover();
		enemigo1.mover();
		enemigo2.mover();
		enemigo3.mover();
		enemigo4.mover();
		enemigo5.mover();

		for (int i=0; i<tiles.size(); i++)
		tiles.get(i).mover();

		for (int i=0; i<arboles.size(); i++)
			arboles.get(i).mover();

		for (int i=0; i<adornos.size(); i++)
			adornos.get(i).mover();


		d1.mover();
		d2.mover();
		d3.mover();
		d4.mover();

		verificadorColisiones();

	}


	public void registrarEventos() {
		escena.setOnKeyPressed(new EventHandler<KeyEvent>() {

			@Override
			public void handle(KeyEvent event) {
				switch (event.getCode().toString()) {
					case "RIGHT":
						derecha = true;
						break;
					case "LEFT":
						izquierda = true;
						break;
					case "UP":
						arriba = true;
						break;
					case "DOWN":
						abajo = true;
						break;
					case "SPACE":
						accion = true;
						break;
				}
			}
		});

		escena.setOnKeyReleased(new EventHandler<KeyEvent>() {

			@Override
			public void handle(KeyEvent event) {
				switch (event.getCode().toString()) {
				case "RIGHT":
					derecha = false;
					break;
				case "LEFT":
					izquierda = false;
					break;
				case "UP":
					arriba = false;
					break;
				case "DOWN":
					abajo = false;
					break;
				case "SPACE":
					accion = false;
					break;
			}
			}
		});
	}

	public void verificadorColisiones(){

		if (jugador.verificarColision(boost1)){
			boost1.setX(-500);
			jugador.setVelocidad(jugador.getVelocidad()+5);
		}

		if (jugador.verificarColision0(enemigo0)){
			enemigo0.setX(enemigo0.getX()+1000);
		}

		if (jugador.verificarColision1(enemigo1)){
			enemigo1.setX(enemigo1.getX()+1300);
		}

		if (jugador.verificarColision2(enemigo2)){
			enemigo2.setX(enemigo2.getX()+800);
		}

		if (jugador.verificarColision3(enemigo3)){
			enemigo3.setX(enemigo3.getX()+1800);
		}

		if (jugador.verificarColision4(enemigo4)){
			enemigo4.setX(enemigo4.getX()+1050);
		}

		if (jugador.verificarColision5(enemigo5)){
			enemigo5.setX(enemigo5.getX()+1550);
		}


		if (disparo.verificarColision0(enemigo0)){
			jugador.agregarPuntuacion(1);
			enemigo0.setX(enemigo0.getX()+1000);
			enemigo0.setCapturado(false);
		}

		if (disparo.verificarColision1(enemigo1)){
			jugador.agregarPuntuacion(1);
			enemigo1.setX(enemigo1.getX()+1000);
			enemigo1.setCapturado(false);
		}

		if (disparo.verificarColision2(enemigo2)){
			jugador.agregarPuntuacion(1);
			enemigo2.setX(enemigo2.getX()+1000);
			enemigo2.setCapturado(false);
		}

		if (disparo.verificarColision3(enemigo3)){
			jugador.agregarPuntuacion(1);
			enemigo3.setX(enemigo3.getX()+1000);
			enemigo3.setCapturado(false);
		}

		if (disparo.verificarColision4(enemigo4)){
			jugador.agregarPuntuacion(1);
			enemigo4.setX(enemigo4.getX()+1000);
			enemigo4.setCapturado(false);
		}

		if (disparo.verificarColision5(enemigo5)){
			jugador.agregarPuntuacion(1);
			enemigo5.setX(enemigo5.getX()+1000);
			enemigo5.setCapturado(false);
		}
	}

}
